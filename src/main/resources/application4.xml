<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--Spring中的继承
        <bean id="Aoo" class="com.wjl.spring.day02.Aoo" parent="fooBean"></bean>
    <bean id="fooBean"   class="com.wjl.spring.day02.Foo">
    </bean>
    -->
    <bean id="Aoo" class="com.wjl.spring.day02.Aoo" parent="fooBean" ></bean>
    <bean id="fooBean"   class="com.wjl.spring.day02.Foo"></bean>

    <!-- bean 的 scope
        scope用来声明容器中的对象所应该处的限定场景或者说该对象的存活时间，即容器在对象进入其
        相应的scope之前，生成并装配这些对象，在该对象不再处于这些scope的限定之后，容器通常会销毁这个对象

        标记为singleton的bean是由容器来保证这种类型的bean在同一个容器中只存在一个共享实例；而Singleton模式则是保证在同一个Classloader中只存在一个这种类型的实例
        对象实例数量。singleton类型的bean定义，在一个容器中只存在一个共享实例，所有对该类型bean的依赖都引用这一单一实例。
        对象存活时间。singleton类型bean定义，从容器启动，到它第一次被请求而实例化开始，只要容器不销毁或者退出，该类型bean的单一实例就会一直存活。
        通常情况下，如果你不指定bean的scope，singleton便是容器默认的scope.
        <bean id="Aoo" class="com.wjl.spring.day02.Aoo" parent="fooBean" scope="singleton"></bean>
    <bean id="fooBean"   class="com.wjl.spring.day02.Foo"></bean>

        针对声明为拥有prototype scope的bean定义，容器在接到该类型对象的请求的时候，会每次都重新
        生成一个新的对象实例给请求方。虽然这种类型的对象的实例化以及属性设置等工作都是由容器负责
        的，但是只要准备完毕，并且对象实例返回给请求方之后，容器就不再拥有当前返回对象的引用，请
        求方需要自己负责当前返回对象的后继生命周期的管理工作，包括该对象的销毁。也就是说，容器每
        次返回给请求方一个新的对象实例之后，就任由这个对象实例“自生自灭”
    -->
    <bean id="Aoo" class="com.wjl.spring.day02.Aoo" parent="fooBean" scope="singleton"></bean>
    <bean id="fooBean"   class="com.wjl.spring.day02.Foo"></bean>

</beans>